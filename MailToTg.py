#7793677369:AAEw15axx4UMdqnIAYmPX6EvkwIuzTVfl1s
#838543272
import imaplib
import email
import telebot
import time
import chardet  # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–¥–∏—Ä–æ–≤–∫–∏
from email.header import decode_header
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
MAIL_SERVER = "imap.mail.ru"
MAIL_USER = "ant.mosco_w@mail.ru"
MAIL_PASS = "aWaVR6q6mpUgP3tuDUY8"
TELEGRAM_TOKEN = "7793677369:AAEw15axx4UMdqnIAYmPX6EvkwIuzTVfl1s"
CHAT_ID = "-1002284366831"


bot = telebot.TeleBot(TELEGRAM_TOKEN)


def decode_email_header(header):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–º—ã –ø–∏—Å—å–º–∞"""
    decoded_header = decode_header(header)
    subject = ""
    for part, encoding in decoded_header:
        if isinstance(part, bytes):  # –ï—Å–ª–∏ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ –≤ –±–∞–π—Ç–∞—Ö
            encoding = encoding if encoding else "utf-8"
            try:
                subject += part.decode(encoding, errors="ignore")
            except:
                subject += part.decode("utf-8", errors="ignore")
        else:
            subject += part
    return subject.strip()


def get_latest_email():
    try:
        print("‚è≥ –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ IMAP...")
        mail = imaplib.IMAP4_SSL(MAIL_SERVER)
        mail.login(MAIL_USER, MAIL_PASS)
        print("‚úÖ –í—Ö–æ–¥ –≤ –ø–æ—á—Ç—É —É—Å–ø–µ—à–µ–Ω!")

        mail.select("inbox")
        result, data = mail.search(None, "UNSEEN")
        mail_ids = data[0].split()

        print(f"üì© –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º: {len(mail_ids)}")

        messages = []
        for num in mail_ids:
            print(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–∏—Å—å–º–æ ID: {num}")

            result, msg_data = mail.fetch(num, "(RFC822)")
            raw_email = msg_data[0][1]
            msg = email.message_from_bytes(raw_email)

            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–µ–º—É –ø–∏—Å—å–º–∞
            subject = msg["subject"] if msg["subject"] else "(–ë–µ–∑ —Ç–µ–º—ã)"
            subject = decode_email_header(subject)

            from_email = msg["from"]
            body = ""

            # üîç –§–ò–õ–¨–¢–†–£–ï–ú –¢–û–õ–¨–ö–û –ó–ê–Ø–í–ö–ò (–µ—Å–ª–∏ —Ç–µ–º–∞ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "[~", –ø–∏—Å—å–º–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è)
            if not subject.startswith("[~"):
                print(f"üö´ –ü–∏—Å—å–º–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ (–Ω–µ –∑–∞—è–≤–∫–∞). –¢–µ–º–∞: {subject}")
                continue

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞
            if msg.is_multipart():
                for part in msg.walk():
                    if part.get_content_type() == "text/plain":
                        payload = part.get_payload(decode=True)
                        encoding = part.get_content_charset()

                        if encoding is None:
                            detected_encoding = chardet.detect(payload)['encoding']
                            encoding = detected_encoding if detected_encoding else "utf-8"

                        body = payload.decode(encoding, errors="ignore").strip()
                        break
            else:
                payload = msg.get_payload(decode=True)
                encoding = msg.get_content_charset()

                if encoding is None:
                    detected_encoding = chardet.detect(payload)['encoding']
                    encoding = detected_encoding if detected_encoding else "utf-8"

                body = payload.decode(encoding, errors="ignore").strip()

            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–æ–Ω—Å–æ–ª—å
            print(f"‚úÖ –ü–∏—Å—å–º–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!")
            print(f"üìå –¢–µ–º–∞: {subject}")
            print(f"üìÑ –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞:\n{body[:1000]}")  # –û–≥—Ä–∞–Ω–∏—á–∏–º –≤—ã–≤–æ–¥ 500 —Å–∏–º–≤–æ–ª–∞–º–∏ –≤ —Å–æ—Å–Ω–æ–ª—å

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ –≤ —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
            messages.append(f"üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n–û—Ç: {from_email}\n–¢–µ–º–∞: {subject}\n\n{body}")

        mail.logout()
        return messages

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_latest_email: {e}")
        return []


def send_to_telegram(messages):
    for msg in messages:
        try:
            print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ Telegram...")
            clean_msg = clean_html_tags(msg)

            bot.send_message(CHAT_ID, clean_msg)
            print("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")


def clean_html_tags(text):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è HTML-—Ç–µ–≥–æ–≤"""
    return re.sub(r"<.*?>", "", text)


# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å –ª–æ–≥–∞–º–∏
while True:
    print("üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ—á—Ç—É...")
    emails = get_latest_email()

    if emails:
        print("üì¨ –ù–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è—é –≤ Telegram...")
        send_to_telegram(emails)
    else:
        print("üì≠ –ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç.")

    time.sleep(599)
    print("üò¥ –ü–æ—Å–ø–∞–ª 10 –º–∏–Ω—É—Ç...\n===================================================================")

