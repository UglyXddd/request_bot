import imaplib
import email
import telebot
import time
import chardet
from email.header import decode_header
import re
import html
import json
from datetime import datetime
from bs4 import BeautifulSoup
import gspread
from bs4 import BeautifulSoup
from google.oauth2.service_account import Credentials
from datetime import datetime

REQUESTS_COUNT_FILE = "requests_count.json"

print("–•–æ—Ä–æ—à–∏–π –¥–µ–Ω—å, —á—Ç–æ–±—ã –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å –≤–º–µ—Å—Ç–æ –ê–ª—ë–Ω—ã!!! v0.10")


def get_request_number():
    """–§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –∑–∞ –¥–µ–Ω—å –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –µ–≥–æ –≤ —Ñ–∞–π–ª–µ"""
    today = datetime.now().strftime("%m%d")  # MMDD

    try:
        with open(REQUESTS_COUNT_FILE, "r") as file:
            data = json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        data = {}

    request_number = data.get(today, 0) + 1
    data[today] = request_number

    with open(REQUESTS_COUNT_FILE, "w") as file:
        json.dump(data, file)

    return request_number


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
MAIL_SERVER = "imap.mail.ru"
MAIL_USER = "ant.mosco_w@mail.ru"
MAIL_PASS = "aWaVR6q6mpUgP3tuDUY8"
TELEGRAM_TOKEN = "7793677369:AAEw15axx4UMdqnIAYmPX6EvkwIuzTVfl1s"
CHAT_ID = "-1002284366831"
#TELEGRAM_TOKEN = "7793677369:AAEw15axx4UMdqnIAYmPX6EvkwIuzTVfl1s"
TELEGRAM_TOKEN = "5965866857:AAFUDbzZCgSPJWYOT5fp71c7PxBq6SFNBss"
#CHAT_ID = "-1002284366831"
CHAT_ID = "650065041"

bot = telebot.TeleBot(TELEGRAM_TOKEN)


def decode_email_header(header):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–º—ã –ø–∏—Å—å–º–∞"""
    decoded_header = decode_header(header)
    subject = ""
    for part, encoding in decoded_header:
        if isinstance(part, bytes):
            encoding = encoding if encoding else "utf-8"
            try:
                subject += part.decode(encoding, errors="ignore")
            except:
                subject += part.decode("utf-8", errors="ignore")
        else:
            subject += part
    return subject.strip()


def extract_relevant_info(body):
    res = []
    soup = BeautifulSoup(body, 'html.parser')

    for tag in soup.find_all(True, recursive=True):
        client = []
        if tag.name == 'b':
            if '–∫–ª–∏–µ–Ω—Ç' in tag.next_sibling.text.lower():
                client.append(tag.text.strip())
                client.append(tag.next_sibling.text.strip())
                client.append('\n')
                next_font = tag.find_next('font')

                if next_font:
                    font_text = next_font.text.strip()
                    # –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —Ü–∏—Ç–∞—Ç–∞–º–∏ (–Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å ">")
                    clean_lines = [line for line in font_text.splitlines() if not line.strip().startswith(">")]
                    client.append('\n'.join(clean_lines))
                    client.append('\n')

        res.append(''.join(client)) if client else None

    return '\n\n'.join(res)


def get_latest_email():
    try:
        print("‚è≥ –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ IMAP...")
        mail = imaplib.IMAP4_SSL(MAIL_SERVER)
        mail.login(MAIL_USER, MAIL_PASS)
        print("‚úÖ –í—Ö–æ–¥ –≤ –ø–æ—á—Ç—É —É—Å–ø–µ—à–µ–Ω!")

        mail.select("inbox")

        result, data = mail.search(None, "SEEN") #–¥–ª—è —Ç–µ—Å—Ç–æ–≤
        #result, data = mail.search(None, "UNSEEN")
        mail_ids = data[0].split()[-10:]  # –î–ª—è —Ç–µ—Å—Ç–æ–≤
        #mail_ids = data[0].split()

        print(f"üì© –ù–∞–π–¥–µ–Ω–æ –ø–∏—Å–µ–º –¥–ª—è —Ç–µ—Å—Ç–∞: {len(mail_ids)}")

        processed_emails = []  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫

        for num in mail_ids:
            print(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–∏—Å—å–º–æ ID: {num}")

            result, msg_data = mail.fetch(num, "(RFC822)")
            raw_email = msg_data[0][1]
            msg = email.message_from_bytes(raw_email)

            subject = msg["subject"] if msg["subject"] else "(–ë–µ–∑ —Ç–µ–º—ã)"
            subject = decode_email_header(subject)
            print("\n–¢–µ–º–∞: ", subject.strip(), "\n")

            if not re.match(r"^\[.*?\]:.*", subject.strip()):
                print(f"üö´ –ü–∏—Å—å–º–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ (–Ω–µ –∑–∞—è–≤–∫–∞). –¢–µ–º–∞: {subject}")
                continue

            body = get_email_body(msg)  # –ü–æ–ª—É—á–∞–µ–º HTML-—Ç–µ–ª–æ –ø–∏—Å—å–º–∞

            # üî• –ò–∑–≤–ª–µ–∫–∞–µ–º –ù–£–ñ–ù–´–ï –î–ê–ù–ù–´–ï –î–û –æ–±—Ä–∞–±–æ—Ç–∫–∏
            court_name, ticket_id, request_date, request_text = extract_request_data(body)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –ø–∏—Å—å–º–µ –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if court_name != "–ù–µ –Ω–∞–π–¥–µ–Ω–æ" and ticket_id != "–ù–µ –Ω–∞–π–¥–µ–Ω–æ" and request_text:
                processed_emails.append((court_name, ticket_id, request_date, request_text))
                print(f"‚úÖ –ó–∞—è–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫!")

        mail.logout()
        return processed_emails  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –°–ü–ò–°–û–ö –í–°–ï–• –ó–ê–Ø–í–û–ö

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_latest_email: {e}")
        return []


def extract_court_info(body):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–¥–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—É–¥–∞ –∏–∑ —Ç–µ–ª–∞ –ø–∏—Å—å–º–∞"""
    soup = BeautifulSoup(body, 'html.parser')
    text = soup.get_text("\n", strip=True)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º HTML –≤ —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç

    match = re.search(r"\((\w+)\)([^\n]+)", text)  # –†–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–¥–∞ —Å—É–¥–∞ –∏ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
    if match:
        court_code = match.group(1).strip()
        court_name = match.group(2).strip()
        court_name = re.sub(r"<.*?>", "", court_name)
        court_code = re.sub(r"<.*?>", "", court_code)

        return f"({court_code}) {court_name}"

    return ""


def get_email_body(msg):
    """–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç —Ç–µ–ª–∞ –ø–∏—Å—å–º–∞ (–ª—é–±–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞)"""
    try:
        if msg.is_multipart():
            for part in msg.walk():
                content_type = part.get_content_type()
                content_disposition = str(part.get("Content-Disposition"))

                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤–ª–æ–∂–µ–Ω–∏—è (—Ñ–∞–π–ª—ã)
                if "attachment" in content_disposition:
                    continue

                # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å, —Å–æ–¥–µ—Ä–∂–∞—â—É—é —Ç–µ–∫—Å—Ç
                if content_type in ["text/html", "text/plain"]:
                    return part.get_payload(decode=True).decode(errors="ignore")

        # –ï—Å–ª–∏ –ø–∏—Å—å–º–æ –Ω–µ multipart, –ø—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç
        return msg.get_payload(decode=True).decode(errors="ignore")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –ø–∏—Å—å–º–∞: {e}")
        return ""


def send_to_telegram(messages):
    for msg in messages:
        try:
            print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ Telegram...")
            bot.send_message(CHAT_ID, msg)
            print("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")


# –§–∞–π–ª —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
SERVICE_ACCOUNT_FILE = "requestbot-449717-0fbe05e908c6.json"

# ID Google —Ç–∞–±–ª–∏—Ü—ã
SPREADSHEET_ID = "1lh8woEj_U4WCRpvzWUzGVARFt80KpM27W2dLc8bul2g"

#SPREADSHEET_ID = "1J__mJm9JNu5KWugecueHUNqE7XY3lnHDuSNI8DcvGc4" #—Ç–µ—Å—Ç


def connect_to_sheets():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets"""
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=scope)
    client = gspread.authorize(creds)
    return client.open_by_key(SPREADSHEET_ID).sheet1  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç


def extract_request_data(email_body):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞"""
    soup = BeautifulSoup(email_body, 'html.parser')

    # 1Ô∏è‚É£ –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞—è–≤–∫–∏ (–∏–∑ –∫–æ–Ω—Ü–∞ –ø–∏—Å—å–º–∞)
    request_id_match = re.search(r"ID –∑–∞–ø—Ä–æ—Å–∞:\s*(\d+)", email_body)
    request_id = request_id_match.group(1) if request_id_match else "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"

    # 2Ô∏è‚É£ –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ (–∏–∑ "–ó–∞–ø–∏—Å—å –æ—Ç: ...")
    date_match = re.search(r"–ó–∞–ø–∏—Å—å –æ—Ç:\s*(\d{2}-\d{2}-\d{4} \d{2}:\d{2}:\d{2})", email_body)
    request_date = date_match.group(1) if date_match else "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"

    # 3Ô∏è‚É£ –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—É–¥–∞
    court_name = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
    court_match = soup.find_all("font", color="#45991c")
    for tag in court_match:
        if re.search(r"\(\w+\)", tag.text):  # –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –∫–æ–¥ —Å—É–¥–∞ (–ø—Ä–∏–º–µ—Ä: (77GV0006))
            court_name = re.sub(r"\(.*?\)", "", tag.text).strip()  # –£–±–∏—Ä–∞–µ–º –∫–æ–¥, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—É–¥–∞
            break

    # 4Ô∏è‚É£ –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ (–≤–µ—Å—å —Ç–µ–∫—Å—Ç –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞)
    request_text = ""
    history_match = soup.find("legend", string="–ò—Å—Ç–æ—Ä–∏—è –ó–∞–ø—Ä–æ—Å–∞")
    if history_match:
        history_fieldset = history_match.find_parent("fieldset")
        if history_fieldset:
            request_text = history_fieldset.get_text("\n", strip=True)

    return court_name, request_id, request_date, request_text


def write_to_google_sheets(court_name, ticket_id, request_date, request_text, engineer_name="–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"):
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets"""
    sheet = connect_to_sheets()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö
    new_row = ["", "", "", "", court_name, ticket_id, request_date, request_text, "", "", "", engineer_name]

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É
    sheet.append_row(new_row, value_input_option="RAW")

    print("‚úÖ –î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ Google Sheets!")


# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
while True:
    print("üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ—á—Ç—É...")
    processed_emails = get_latest_email()  # –ë–µ—Ä–µ–º –í–°–ï –∑–∞—è–≤–∫–∏

    if processed_emails:
        print(f"üì¨ –ù–∞–π–¥–µ–Ω–æ {len(processed_emails)} –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫, –æ—Ç–ø—Ä–∞–≤–ª—è—é –≤ Telegram...")

        for court_name, ticket_id, request_date, request_text in processed_emails:
            send_to_telegram([f"–ó–∞—è–≤–∫–∞ {ticket_id}:\n{request_text}"])  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∑–∞—è–≤–∫—É

        print("üìä –î–æ–±–∞–≤–ª—è—é –∑–∞—è–≤–∫–∏ –≤ Google Sheets...")
        for court_name, ticket_id, request_date, request_text in processed_emails:
            write_to_google_sheets(court_name, ticket_id, request_date, request_text)  # –ó–∞–ø–∏—Å—å –∫–∞–∂–¥–æ–π –∑–∞—è–≤–∫–∏

        print("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ Google Sheets!")
    else:
        print("üì≠ –ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç.")

    time.sleep(599)
    print("üò¥ –ü–æ—Å–ø–∞–ª 10 –º–∏–Ω—É—Ç...\n===================================================================")
