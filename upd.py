import imaplib
import email
import telebot
import time
import chardet
from email.header import decode_header
import re
import html
import json
from datetime import datetime
from bs4 import BeautifulSoup

REQUESTS_COUNT_FILE = "requests_count.json"

print("–•–æ—Ä–æ—à–∏–π –¥–µ–Ω—å, —á—Ç–æ–±—ã –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å –≤–º–µ—Å—Ç–æ –ê–ª—ë–Ω—ã!!! v0.9")


def get_request_number():
    """–§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –∑–∞ –¥–µ–Ω—å –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –µ–≥–æ –≤ —Ñ–∞–π–ª–µ"""
    today = datetime.now().strftime("%m%d")  # MMDD

    try:
        with open(REQUESTS_COUNT_FILE, "r") as file:
            data = json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        data = {}

    request_number = data.get(today, 0) + 1
    data[today] = request_number

    with open(REQUESTS_COUNT_FILE, "w") as file:
        json.dump(data, file)

    return request_number


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
MAIL_SERVER = "imap.mail.ru"
MAIL_USER = "ant.mosco_w@mail.ru"
MAIL_PASS = "aWaVR6q6mpUgP3tuDUY8"
TELEGRAM_TOKEN = "7793677369:AAEw15axx4UMdqnIAYmPX6EvkwIuzTVfl1s"
CHAT_ID = "-1002284366831"


bot = telebot.TeleBot(TELEGRAM_TOKEN)


def decode_email_header(header):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–º—ã –ø–∏—Å—å–º–∞"""
    decoded_header = decode_header(header)
    subject = ""
    for part, encoding in decoded_header:
        if isinstance(part, bytes):
            encoding = encoding if encoding else "utf-8"
            try:
                subject += part.decode(encoding, errors="ignore")
            except:
                subject += part.decode("utf-8", errors="ignore")
        else:
            subject += part
    return subject.strip()


def extract_relevant_info(body):
    res = []
    soup = BeautifulSoup(body, 'html.parser')

    for tag in soup.find_all(True, recursive=True):
        print(f"{tag}  —Ç—Ä–∞–π –ø–æ —Ç—ç–≥—É")
        client = []
        print(f"–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –∫–ª–∏–µ–Ω—Ç {client}")
        if tag.name == 'b':
            if '–∫–ª–∏–µ–Ω—Ç' in tag.next_sibling.text.lower():
                client.append(tag.text.strip())
                client.append(tag.next_sibling.text.strip())
                client.append('\n')
                client.append(tag.find_next('font').text.strip())
                client.append('\n')

        res.append(''.join(client)) if client else None

    return '\n\n'.join(res)


def get_latest_email():
    try:
        print("‚è≥ –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ IMAP...")
        mail = imaplib.IMAP4_SSL(MAIL_SERVER)
        mail.login(MAIL_USER, MAIL_PASS)
        print("‚úÖ –í—Ö–æ–¥ –≤ –ø–æ—á—Ç—É —É—Å–ø–µ—à–µ–Ω!")

        mail.select("inbox")
        result, data = mail.search(None, "UNSEEN")
        mail_ids = data[0].split()

        print(f"üì© –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º: {len(mail_ids)}")

        messages = []
        for num in mail_ids:
            print(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–∏—Å—å–º–æ ID: {num}")

            result, msg_data = mail.fetch(num, "(RFC822)")
            raw_email = msg_data[0][1]
            msg = email.message_from_bytes(raw_email)

            subject = msg["subject"] if msg["subject"] else "(–ë–µ–∑ —Ç–µ–º—ã)"
            subject = decode_email_header(subject)
            print("\n–¢–µ–º–∞: ", subject.strip(), "\n\n\n")
            if not re.match(r"^\[.*?\]:.*", subject.strip()):
                print(f"üö´ –ü–∏—Å—å–º–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ (–Ω–µ –∑–∞—è–≤–∫–∞). –¢–µ–º–∞: {subject}")
                continue

            body = ""
            print(f"\n\n\n –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º—É–ª—å—Ç–∏–ø–∞—Ä—Ç ")
            if msg.is_multipart():
                print(f"\n\n\n –ü–∏—Å—å–º–æ –º—É–ª—å—Ç–∏–ø–∞—Ä—Ç ")
                for part in msg.walk():
                    if part.get_content_type() == "text/html":
                        payload = part.get_payload(decode=True)
                        encoding = part.get_content_charset()

                        if encoding is None:
                            detected_encoding = chardet.detect(payload)['encoding']
                            encoding = detected_encoding if detected_encoding else "utf-8"

                        body = payload.decode(encoding, errors="ignore").strip()
                        break
            else:
                print(f"\n\n\n –ü–∏—Å—å–º–æ –ù–ï –º—É–ª—å—Ç–∏–ø–∞—Ä—Ç ")
                payload = msg.get_payload(decode=True)
                encoding = msg.get_content_charset()

                if encoding is None:
                    detected_encoding = chardet.detect(payload)['encoding']
                    encoding = detected_encoding if detected_encoding else "utf-8"

                body = payload.decode(encoding, errors="ignore").strip()
            print(f"\n\n\n –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ ")

            print(f"\n++++\n+++++\n\n++++\n+++++\n\n++++\n+++++\n\n++++\n+++++\n {body}, \n++++\n+++++\n\n++++\n+++++\n\n++++\n+++++\n\n++++\n+++++\n")
            body = get_email_body(msg)

            history = extract_relevant_info(body)
            print(f"\n –ò—Å—Ç–æ—Ä–∏—è: {history}")
            if history:
                request_number = get_request_number()
                today_date = datetime.now().strftime("%m%d")  # MMDD

                ticket_id_match = re.search(r"\[(.*?)\]", subject)
                ticket_id = ticket_id_match.group(1) if ticket_id_match else "0000"

                court_info = extract_court_info(body)
                # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö —Å ~ –∏ ticket_id
                subject_clean = re.sub(r'\[.*?\]', '', subject).strip()
                formatted_subject = f"{today_date}-{request_number} {subject_clean} [{ticket_id}] {court_info}"

                print(f"üéØ –ù–æ–≤–∞—è —Ç–µ–º–∞ –∑–∞—è–≤–∫–∏: {formatted_subject}")
                history = re.sub(r'<.*?>', '', history)
                # –°–æ–∑–¥–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                clean_message = f"{formatted_subject}\n\n{history}"
                messages.append(clean_message)
                print(f"‚úÖ –ü–∏—Å—å–º–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ –≥–æ—Ç–æ–≤–æ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ!")

        mail.logout()
        return messages

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_latest_email: {e}")
        return []


def extract_court_info(body):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–¥–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—É–¥–∞ –∏–∑ —Ç–µ–ª–∞ –ø–∏—Å—å–º–∞"""
    soup = BeautifulSoup(body, 'html.parser')
    text = soup.get_text("\n", strip=True)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º HTML –≤ —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç

    match = re.search(r"\((\w+)\)([^\n]+)", text)  # –†–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–¥–∞ —Å—É–¥–∞ –∏ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
    if match:
        court_code = match.group(1).strip()
        court_name = match.group(2).strip()
        court_name = re.sub(r"<.*?>", "", court_name)
        court_code = re.sub(r"<.*?>", "", court_code)

        print("\n\n", court_code, "\n\n", court_name)
        return f"({court_code}) {court_name}"

    return ""


def get_email_body(msg):
    """–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç —Ç–µ–ª–∞ –ø–∏—Å—å–º–∞ (–ª—é–±–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞)"""
    try:
        if msg.is_multipart():
            for part in msg.walk():
                content_type = part.get_content_type()
                content_disposition = str(part.get("Content-Disposition"))

                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤–ª–æ–∂–µ–Ω–∏—è (—Ñ–∞–π–ª—ã)
                if "attachment" in content_disposition:
                    continue

                # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å, —Å–æ–¥–µ—Ä–∂–∞—â—É—é —Ç–µ–∫—Å—Ç
                if content_type in ["text/html", "text/plain"]:
                    return part.get_payload(decode=True).decode(errors="ignore")

        # –ï—Å–ª–∏ –ø–∏—Å—å–º–æ –Ω–µ multipart, –ø—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç
        return msg.get_payload(decode=True).decode(errors="ignore")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –ø–∏—Å—å–º–∞: {e}")
        return ""


def send_to_telegram(messages):
    for msg in messages:
        try:
            print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ Telegram...")
            bot.send_message(CHAT_ID, msg)
            print("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")


# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
while True:
    print("üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ—á—Ç—É...")
    emails = get_latest_email()

    if emails:
        print("üì¨ –ù–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è—é –≤ Telegram...")
        send_to_telegram(emails)
    else:
        print("üì≠ –ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç.")

    time.sleep(599)
    print("üò¥ –ü–æ—Å–ø–∞–ª 10 –º–∏–Ω—É—Ç...\n===================================================================")
